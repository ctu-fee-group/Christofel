// <auto-generated />
using System;
using Christofel.BaseLib.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Christofel.BaseLib.Migrations
{
    [DbContext(typeof(ChristofelBaseContext))]
    [Migration("20210812085458_AddRegistrationTokenSpecificRoleAssignments")]
    partial class AddRegistrationTokenSpecificRoleAssignments
    {
        /// <inheritdoc/>
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("Christofel.BaseLib.Database.Models.DbUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("AuthenticatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CtuUsername")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<ulong>("DiscordId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int?>("DuplicitUserId")
                        .HasColumnType("int");

                    b.Property<bool>("DuplicityApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RegistrationCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId");

                    b.HasIndex("DuplicitUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Christofel.BaseLib.Database.Models.PermissionAssignment", b =>
                {
                    b.Property<int>("PermissionAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.HasKey("PermissionAssignmentId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Christofel.BaseLib.Database.Models.ProgrammeRoleAssignment", b =>
                {
                    b.Property<int>("ProgrammeRoleAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("Programme")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("ProgrammeRoleAssignmentId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("ProgrammeRoleAssignments");
                });

            modelBuilder.Entity("Christofel.BaseLib.Database.Models.RoleAssignment", b =>
                {
                    b.Property<int>("RoleAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("RoleId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.HasKey("RoleAssignmentId");

                    b.ToTable("RoleAssignments");
                });

            modelBuilder.Entity("Christofel.BaseLib.Database.Models.SpecificRoleAssignment", b =>
                {
                    b.Property<int>("SpecificRoleAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("SpecificRoleAssignmentId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("SpecificRoleAssignments");
                });

            modelBuilder.Entity("Christofel.BaseLib.Database.Models.TitleRoleAssignment", b =>
                {
                    b.Property<int>("TitleRoleAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<bool>("Post")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Pre")
                        .HasColumnType("tinyint(1)");

                    b.Property<uint>("Priority")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("TitleRoleAssignmentId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("TitleRoleAssignment");
                });

            modelBuilder.Entity("Christofel.BaseLib.Database.Models.UsermapRoleAssignment", b =>
                {
                    b.Property<int>("UsermapRoleAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<bool>("RegexMatch")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UsermapRole")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.HasKey("UsermapRoleAssignmentId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("UsermapRoleAssignments");
                });

            modelBuilder.Entity("Christofel.BaseLib.Database.Models.YearRoleAssignment", b =>
                {
                    b.Property<int>("YearRoleAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("YearRoleAssignmentId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("YearRoleAssignments");
                });

            modelBuilder.Entity("Christofel.BaseLib.Database.Models.DbUser", b =>
                {
                    b.HasOne("Christofel.BaseLib.Database.Models.DbUser", "DuplicitUser")
                        .WithMany("DuplicitUsersBack")
                        .HasForeignKey("DuplicitUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DuplicitUser");
                });

            modelBuilder.Entity("Christofel.BaseLib.Database.Models.PermissionAssignment", b =>
                {
                    b.OwnsOne("Christofel.BaseLib.Database.Models.DiscordTarget", "Target", b1 =>
                        {
                            b1.Property<int>("PermissionAssignmentId")
                                .HasColumnType("int");

                            b1.Property<ulong>("DiscordId")
                                .HasColumnType("bigint unsigned");

                            b1.Property<ulong?>("GuildId")
                                .HasColumnType("bigint unsigned");

                            b1.Property<int>("TargetType")
                                .HasColumnType("int");

                            b1.HasKey("PermissionAssignmentId");

                            b1.ToTable("Permissions");

                            b1.WithOwner()
                                .HasForeignKey("PermissionAssignmentId");
                        });

                    b.Navigation("Target")
                        .IsRequired();
                });

            modelBuilder.Entity("Christofel.BaseLib.Database.Models.ProgrammeRoleAssignment", b =>
                {
                    b.HasOne("Christofel.BaseLib.Database.Models.RoleAssignment", "Assignment")
                        .WithMany("ProgrammeRoleAssignments")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("Christofel.BaseLib.Database.Models.SpecificRoleAssignment", b =>
                {
                    b.HasOne("Christofel.BaseLib.Database.Models.RoleAssignment", "Assignment")
                        .WithMany("SpecificRoleAssignments")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("Christofel.BaseLib.Database.Models.TitleRoleAssignment", b =>
                {
                    b.HasOne("Christofel.BaseLib.Database.Models.RoleAssignment", "Assignment")
                        .WithMany("TitleRoleAssignments")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("Christofel.BaseLib.Database.Models.UsermapRoleAssignment", b =>
                {
                    b.HasOne("Christofel.BaseLib.Database.Models.RoleAssignment", "Assignment")
                        .WithMany("UsermapRoleAssignments")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("Christofel.BaseLib.Database.Models.YearRoleAssignment", b =>
                {
                    b.HasOne("Christofel.BaseLib.Database.Models.RoleAssignment", "Assignment")
                        .WithMany("YearRoleAssignments")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("Christofel.BaseLib.Database.Models.DbUser", b =>
                {
                    b.Navigation("DuplicitUsersBack");
                });

            modelBuilder.Entity("Christofel.BaseLib.Database.Models.RoleAssignment", b =>
                {
                    b.Navigation("ProgrammeRoleAssignments");

                    b.Navigation("SpecificRoleAssignments");

                    b.Navigation("TitleRoleAssignments");

                    b.Navigation("UsermapRoleAssignments");

                    b.Navigation("YearRoleAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
