schema {
  query: Query
  mutation: Mutation
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type Mutation {
  registerDiscord(input: RegisterDiscordInput!): RegisterDiscordPayload!
  registerCtu(input: RegisterCtuInput!): RegisterCtuPayload!
  registerCtuToken(input: RegisterCtuTokenInput!): RegisterCtuPayload!
  verifyRegistrationCode(input: VerifyRegistrationCodeInput!): VerifyRegistrationCodePayload!
}

type Query {
  node(id: ID!): Node
}

type RegisterCtuPayload {
  user: User
  errors: [UserError!]!
}

type RegisterDiscordPayload {
  user: User
  registrationCode: String!
  errors: [UserError!]!
}

"Database table that holds authenticated users\nor users in auth process."
type User implements Node {
  "Gets or sets the primary key of DbUser."
  id: ID!
  "Gets Discord id of the user."
  discordId: UnsignedLong
  "Gets or sets last date of authentication."
  authenticatedAt: DateTime
  "Gets or sets CTU account username."
  ctuUsername: String
  "Gets or sets whether the duplicity was approved."
  duplicityApproved: Boolean!
  "Gets or sets code used for registration purposes."
  registrationCode: String
  "Date and time of creation of the entity."
  createdAt: DateTime!
  "Date and time of update of the entity, set if the entity was updated."
  updatedAt: DateTime
}

type UserError {
  errorCode: UserErrorCode!
  message: String!
}

type VerifyRegistrationCodePayload {
  verificationStage: RegistrationCodeVerification!
  errors: [UserError!]!
}

input RegisterCtuInput {
  oauthCode: String!
  redirectUri: String!
  registrationCode: String!
}

input RegisterCtuTokenInput {
  accessToken: String!
  registrationCode: String!
}

input RegisterDiscordInput {
  oauthCode: String!
  redirectUri: String!
}

input VerifyRegistrationCodeInput {
  registrationCode: String!
}

enum RegistrationCodeVerification {
  NOT_VALID
  DISCORD_AUTHORIZED
  CTU_AUTHORIZED
  DONE
}

enum UserErrorCode {
  UNSPECIFIED
  OAUTH_TOKEN_REJECTED
  REJECTED_DUPLICATE_USER
  USER_NOT_IN_GUILD
  INVALID_REGISTRATION_CODE
  SOFT_AUTH_ERROR
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"Snowflake ulong type"
scalar UnsignedLong